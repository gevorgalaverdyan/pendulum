<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title>Pendulum Simulator</title>
    <link rel="stylesheet" href="styles/style.css" />
  </head>

  <body>
    <h3>Simple Pendulum</h3>

    <div class="gridContainer">
      <canvas id="canvas" width="1000" height="550"></canvas>
    </div>

    <form id="startForm">
      <button type="submit">Start</button>
    </form>

    <form id="stopForm">
      <button type="submit">Stop(Clear DB)</button>
    </form>

    <button id="pauseForm">Pause/Resume</button>

    <h4>Polled Location</h4>
    <textarea
      id="polledTextArea"
      cols="100"
      rows="30"
      style="
        border-radius: 5px;
        border: 3px black dashed;
        background-color: white;
      "
      disabled
      placeholder="Polled Data will be displayed here..."
    ></textarea>
    <script>
      const API_URL = '/api/pendulums';
      const canvas = document.getElementById('canvas');
      const context = canvas.getContext('2d');
      let prev = 0;
      let simStarted = false;

      let pausedPositions = [];

      function PendulumSim(
        length_m,
        gravity_mps2,
        initialAngle_rad,
        timestep_ms,
        callback
      ) {
        let velocity = 0;
        let angle = initialAngle_rad;
        let k = -gravity_mps2 / length_m;
        let timestep_s = timestep_ms / 1000;

        //every timestep_s call this function to get the new calculated angle
        return setInterval(function () {
          const acceleration = k * Math.sin(angle);
          velocity += acceleration * timestep_s;
          angle += velocity * timestep_s;
          callback(angle);
        }, timestep_ms);
      }

      //GET -> START
      const startForm = document.querySelector('#startForm');

      startForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        const res = await getPendulums();
        console.log('GET response: ', res);

        const angleCoefficient = 5 / 9; // because 100 =  180 degrees, so this conversion coeffiecent works similar to converting  numbers to degrees
        let i = 10;

        let counter = 0;
        isTrue = true;
        res.map((element) => {
          const { _id, angularOffset, stringLength, xCoordinate } = element;
          pausedPositions.push({
            _id: _id,
            pausedX: 0,
            pausedAngle: 0,
          });

          let item = pausedPositions.find((element) => element._id === _id);

          PendulumSim(
            0.5, // speed
            9.80665, // gravity
            (Math.PI * angularOffset * angleCoefficient) / 100,
            i++, //for callback frames
            function (angle) {
              const rPend = stringLength; // bar length
              const rBall = 25; // ball radius
              const rBar = 3; // bar width
              ///Ball position
              const ballX = Math.sin(angle) * rPend;
              const ballY = Math.cos(angle) * rPend;

              //  sin k = opp/hyp = ballX/rPend
              //  cos k = adj/hyp = ballY/rPend

              // ballX: opp = sin k * hyp

              //         /|
              //   hyp  / | ballY
              //       /__|
              //      ballX

              context.fillStyle = 'rgba(255,255,255,0.51)';
              context.fillRect(0, 0, canvas.width, canvas.height);
              context.fillStyle = 'grey';
              context.strokeStyle = 'rgba(0,0,0)';

              context.save();
              context.translate(xCoordinate, 0);
              context.rotate(angle);

              context.beginPath();
              context.rect(-rBar, -rBar, rBar * 2, rPend + rBar * 2);
              context.fill();
              context.stroke();

              context.beginPath();
              context.arc(0, rPend, rBall, 0, Math.PI * 2, false);
              context.fill();
              context.stroke();
              context.restore();
              prev = angle;

              let realLocation = ballX;

              if (ballX < 0) {
                realLocation *= -1;
              } else if (ballX > 0) {
                realLocation = xCoordinate - realLocation;
              }

              item.pausedX = realLocation;
              item.pausedAngle = (angle * 180) / Math.PI; //convert to degrees
            }
          );
        });
      });

      const getPendulums = async () => {
        const res = await fetch(API_URL, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' },
        });

        const data = await res.json();
        simStarted = true;
        return data;
      };

      //DELETE -> STOP
      const stopForm = document.querySelector('#stopForm');

      stopForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        if (window.confirm('Do you want to clear the DB?')) {
          const res = await fetch(API_URL, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
          });

          const data = await res.json();
          window.alert(data.success ? 'Collection DELETED' : 'ERROR');
        }
      });

      //UPDATE -> PAUSE

      const pauseForm = document.querySelector('#pauseForm');
      const polledTextArea = document.querySelector('#polledTextArea');

      pauseForm.addEventListener('click', async (event) => {
        event.preventDefault();

        const data = await updatePendulums();

        polledTextArea.innerHTML +=
          '\nPolled by CLICK\n\n' +
          JSON.stringify(data.pausedPendulumsList) +
          '\n';
      });

      const updatePendulums = async () => {
        const res = await fetch(API_URL, {
          method: 'PUT',
          headers: {
            'Content-type': 'application/json',
          },
          body: JSON.stringify(pausedPositions),
        });

        const data = await res.json();
        return data;
      };


      async function poll() {
        timer = setInterval(async function () {
          console.log('Polling(in 5 sec)...')
          const data = await updatePendulums();

          simStarted
            ? (polledTextArea.innerHTML +=
                '\nPolling(in 5 sec)...\n' +
                JSON.stringify(data.pausedPendulumsList) +
                '\n')
            : null;
        }, 5000);
      }

      poll();
    </script>
  </body>
</html>
